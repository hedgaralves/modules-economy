
name: Terraform Apply


on:
  push:
    branches:
      - main


permissions:
  id-token: write
  contents: read

jobs:
  terraform-aws-infra:
    name: Terraform Apply (Infra AWS)
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Trivy IaC Scan
        uses: aquasecurity/trivy-action@0.33.0
        with:
          scan-type: config
          scan-ref: ./terraform-eks-cost-optimized
          format: table
          exit-code: 1
          ignore-unfixed: true
          severity: HIGH

      - name: Upload resultado do Trivy
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_OIDC }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        run: terraform -chdir=terraform-eks-cost-optimized init

      - name: Terraform Apply (Infra AWS)
        run: terraform -chdir=terraform-eks-cost-optimized apply -auto-approve -target=module.eks

      - name: Espera pelo endpoint do EKS
        run: |
          for i in {1..30}; do
            STATUS=$(aws eks describe-cluster --region us-east-1 --name eks-lab --query "cluster.status" --output text)
            if [ "$STATUS" = "ACTIVE" ]; then
              echo "EKS está ACTIVE!"
              break
            fi
            echo "Aguardando EKS ficar ACTIVE..."
            sleep 20
          done

      - name: Notificação Slack (Infra AWS)
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author
          text: |
            :rocket: *Status do Deploy Terraform (Infra AWS)*
            O workflow terminou com status: *${{ job.status }}*
            Repositório: ${{ github.repository }}
            Autor: ${{ github.actor }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  terraform-k8s-helm:
    name: Terraform Apply (K8s/Helm)
    runs-on: ubuntu-latest
    needs: terraform-aws-infra
    environment: production
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_OIDC }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Configure kubeconfig for EKS
        run: aws eks update-kubeconfig --region us-east-1 --name eks-lab

      - name: Aguarda propagação do kubeconfig
        run: sleep 30

      - name: Debug kubeconfig
        run: cat ~/.kube/config

      - name: Terraform Init
        run: terraform -chdir=terraform-eks-cost-optimized init

      - name: Terraform Apply (K8s/Helm)
        run: |
          export KUBECONFIG=$HOME/.kube/config
          terraform -chdir=terraform-eks-cost-optimized apply -auto-approve -target=helm_release.cluster_autoscaler

      - name: Captura resumo do plano Terraform
        if: always()
        run: |
          terraform -chdir=terraform-eks-cost-optimized plan -no-color > tfplan.txt || true
          grep -E '^(  [~+-])|^(Plan: )' tfplan.txt > tfplan-summary.txt || true
          echo '--- Resumo do plano ---'
          cat tfplan-summary.txt
          echo "TF_PLAN_SUMMARY<<EOF" >> $GITHUB_ENV
          cat tfplan-summary.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Notificação Slack (K8s/Helm)
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author
          text: |
            :rocket: *Status do Deploy Terraform (K8s/Helm)*
            O workflow terminou com status: *${{ job.status }}*
            Repositório: ${{ github.repository }}
            Autor: ${{ github.actor }}
            Commit: ${{ github.sha }}
            
            *Resumo dos recursos criados/alterados/excluídos:*
            ```
            ${{ env.TF_PLAN_SUMMARY }}
            ```
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
